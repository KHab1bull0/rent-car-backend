// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        String      @id @default(uuid())
  fullname  String
  email     String
  password  String
  avatarUrl String
  status    String      @default("inactive")
  role      String      @default("user")
  createdAt DateTime    @default(now()) // Timestamp for when the record is created
  updatedAt DateTime    @updatedAt 
  rentals   Rentals[]
  payments  Payments[]
  contacts  Contacts[]
  CarFindex CarFindex[]
}

model Rentals {
  id         String   @id @default(uuid())
  userId     String
  carId      String
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       Users    @relation(fields: [userId], references: [id])
  car        Cars     @relation(fields: [carId], references: [id])
}

model Colors {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cars      Cars[]
}

model RefreshTokens {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brands {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime
  cars      Cars[]
}

model Payments {
  id        String   @id @default(uuid())
  userId    String
  amount    Int
  method    String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      Users    @relation(fields: [userId], references: [id])
}

model Cars {
  id          String      @id @default(uuid())
  name        String
  year        Int
  modelId     String
  brandId     String
  colorId     String
  isAvailable Boolean
  price       Int
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  brand       Brands      @relation(fields: [brandId], references: [id])
  color       Colors      @relation(fields: [colorId], references: [id])
  rentals     Rentals[]
  CarFindex   CarFindex[]
}

model Otps {
  id        String   @id @default(uuid())
  email     String
  otp       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarFindex {
  id        String   @id @default(uuid())
  carId     String
  userId    String
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  car       Cars     @relation(fields: [carId], references: [id])
  user      Users    @relation(fields: [userId], references: [id])
}

model Contacts {
  id        String   @id @default(uuid())
  userId    String
  fullname  String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      Users    @relation(fields: [userId], references: [id])
}

model Customers {
  id        String   @id @default(uuid())
  fullname  String
  phone     String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
